// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package pingdom is a generated GoMock package.
package pingdom

import (
	gomock "github.com/golang/mock/gomock"
	pingdom "github.com/russellcardullo/go-pingdom/pingdom"
	reflect "reflect"
)

// MockuserService is a mock of userService interface
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockuserService) List() ([]pingdom.UsersResponse, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]pingdom.UsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockuserServiceMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockuserService)(nil).List))
}

// MockcheckService is a mock of checkService interface
type MockcheckService struct {
	ctrl     *gomock.Controller
	recorder *MockcheckServiceMockRecorder
}

// MockcheckServiceMockRecorder is the mock recorder for MockcheckService
type MockcheckServiceMockRecorder struct {
	mock *MockcheckService
}

// NewMockcheckService creates a new mock instance
func NewMockcheckService(ctrl *gomock.Controller) *MockcheckService {
	mock := &MockcheckService{ctrl: ctrl}
	mock.recorder = &MockcheckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcheckService) EXPECT() *MockcheckServiceMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockcheckService) Read(id int) (*pingdom.CheckResponse, error) {
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(*pingdom.CheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockcheckServiceMockRecorder) Read(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockcheckService)(nil).Read), id)
}

// Create mocks base method
func (m *MockcheckService) Create(check pingdom.Check) (*pingdom.CheckResponse, error) {
	ret := m.ctrl.Call(m, "Create", check)
	ret0, _ := ret[0].(*pingdom.CheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockcheckServiceMockRecorder) Create(check interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcheckService)(nil).Create), check)
}

// Update mocks base method
func (m *MockcheckService) Update(id int, check pingdom.Check) (*pingdom.PingdomResponse, error) {
	ret := m.ctrl.Call(m, "Update", id, check)
	ret0, _ := ret[0].(*pingdom.PingdomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockcheckServiceMockRecorder) Update(id, check interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockcheckService)(nil).Update), id, check)
}

// Delete mocks base method
func (m *MockcheckService) Delete(id int) (*pingdom.PingdomResponse, error) {
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*pingdom.PingdomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockcheckServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockcheckService)(nil).Delete), id)
}

// List mocks base method
func (m *MockcheckService) List(params ...map[string]string) ([]pingdom.CheckResponse, error) {
	varargs := []interface{}{}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]pingdom.CheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockcheckServiceMockRecorder) List(params ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockcheckService)(nil).List), params...)
}

// MockpingdomClient is a mock of pingdomClient interface
type MockpingdomClient struct {
	ctrl     *gomock.Controller
	recorder *MockpingdomClientMockRecorder
}

// MockpingdomClientMockRecorder is the mock recorder for MockpingdomClient
type MockpingdomClientMockRecorder struct {
	mock *MockpingdomClient
}

// NewMockpingdomClient creates a new mock instance
func NewMockpingdomClient(ctrl *gomock.Controller) *MockpingdomClient {
	mock := &MockpingdomClient{ctrl: ctrl}
	mock.recorder = &MockpingdomClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockpingdomClient) EXPECT() *MockpingdomClientMockRecorder {
	return m.recorder
}

// Users mocks base method
func (m *MockpingdomClient) Users() userService {
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(userService)
	return ret0
}

// Users indicates an expected call of Users
func (mr *MockpingdomClientMockRecorder) Users() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockpingdomClient)(nil).Users))
}

// Checks mocks base method
func (m *MockpingdomClient) Checks() checkService {
	ret := m.ctrl.Call(m, "Checks")
	ret0, _ := ret[0].(checkService)
	return ret0
}

// Checks indicates an expected call of Checks
func (mr *MockpingdomClientMockRecorder) Checks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checks", reflect.TypeOf((*MockpingdomClient)(nil).Checks))
}
